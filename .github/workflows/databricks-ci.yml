name: Databricks Asset Bundles CI

on:
  pull_request:
    branches:
      - main
      - feature/dabsdeploy
  push:
    branches:
      - main
      - feature/dabsdeploy

jobs:
  validate-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}

      - name: Configure Databricks CLI authentication
        run: |
          echo "[DEFAULT]" > ~/.databrickscfg
          echo "host = https://e2-demo-field-eng.cloud.databricks.com" >> ~/.databrickscfg
          echo "token = ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}" >> ~/.databrickscfg


      - name: Ensure serverless SQL warehouse exists
        env:
          DATABRICKS_HOST: 'https://e2-demo-field-eng.cloud.databricks.com'
          DATABRICKS_TOKEN: ${{ secrets.DEPLOY_NOTEBOOK_TOKEN }}
        run: |
          WAREHOUSE_NAME="Shared Unity Catalog Serverless"
          # Try to get the warehouse ID by name using REST API
          WAREHOUSE_ID=$(curl -s -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "$DATABRICKS_HOST/api/2.0/sql/warehouses" | \
            python3 -c "import sys, json; ws=json.load(sys.stdin)['warehouses']; print(next((w['id'] for w in ws if w['name']=='${WAREHOUSE_NAME}'),''))")
          
          if [ -z "$WAREHOUSE_ID" ]; then
            echo "Warehouse '$WAREHOUSE_NAME' not found. Creating..."
            # Create warehouse using REST API
            WAREHOUSE_ID=$(curl -s -X POST -H "Authorization: Bearer $DATABRICKS_TOKEN" \
              -H "Content-Type: application/json" \
              "$DATABRICKS_HOST/api/2.0/sql/warehouses" \
              -d "{
                \"name\": \"${WAREHOUSE_NAME}\",
                \"cluster_size\": \"2X-Small\",
                \"enable_serverless_compute\": true,
                \"auto_stop_mins\": 10
              }" | python3 -c "import sys, json; print(json.load(sys.stdin)['id'])")
            echo "Created warehouse with ID: $WAREHOUSE_ID"
          else
            echo "Warehouse '$WAREHOUSE_NAME' already exists with ID: $WAREHOUSE_ID"
          fi

      - name: Validate bundle
        run: databricks bundle validate

      - name: Deploy to CI environment
        if: github.event_name == 'pull_request'
        run: |
          export PR_NUMBER=${{ github.event.number }}
          databricks bundle deploy --target dev --var="environment=pr-${PR_NUMBER}"

      - name: Run workflow tests
        if: github.event_name == 'pull_request'
        run: |
          export PR_NUMBER=${{ github.event.number }}
          databricks bundle run demo_workflow --target dev

      - name: Deploy to main or feature/dabsdeploy
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/dabsdeploy')
        run: databricks bundle deploy --target dev

      - name: Cleanup PR deployment
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: |
          export PR_NUMBER=${{ github.event.number }}
          databricks bundle destroy --target dev --var="environment=pr-${PR_NUMBER}" || true
